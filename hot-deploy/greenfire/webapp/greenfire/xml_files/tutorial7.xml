<?xml version="1.0" encoding="utf-8" ?>
<Chapter>
     <Title>Python Tutorial 7: The For Loop </Title>
     <Data>To solve the next problem, you will need to learn how for loops work. In addition, you will also learn about a programming structure called list that is used to store data. Python has two types of loops: while and for. You've already learned how to use the while loop. Likewise, the for loop is also used to perform repetitious tasks. The next example shows a simple program that has a for loop to print out the numbers 0 to 9:
for i in range(10):
    print i
Copy this program into the editor and run it. Note that the words "for" and "in" used in the program are keywords. The variable i is known as the loop variable and is assigned one value at a time from a list of numbers generated by the range function. For example, range(10) generates the list of numbers 0 to 9. To begin with, i is assigned the first number in the list, which is 0, and this is printed out by the print statement. This completes the first loop iteration. In the second loop iteration, i is assigned the next value in the list, which is 1, and so on. The loop executes until all the numbers in the list have been printed out.
To better understand how the function range works, rerun the program with different arguments to the function. In general, the function range takes an argument of a number, say n, to generate a list of numbers from 0 to n-1. Note that the argument n is not included in the list. To change the starting number of the list, two arguments must to given to this function as shown in the following program:
for i in range(100, 200):
    print i
In this example, the first argument of 100 to function range is the starting number of the list, and the second argument of 200 implies that 199 is the last number of the list. An alternate way to generate a list of numbers without using the range function is by specifying the values in the list within square brackets and separated by commas. For example, the following statement creates a list called num with the elements 0 to 5:
num = [0, 1, 2, 3, 4, 5]
You can create a loop to display all the numbers in this list as follows:
for i in num:
    print i
In each loop iteration, successive values from the list num will be assigned to the variable i. Copy this program into the editor and run it. Check how the output changes when the list elements are modified. 
Lists are not restricted to numeric values, and can contain textual values and even objects. For example, Merscythe creates a list to store the names of the root vegetables he has gathered in a short foraging expedition with Herv, shortly after enjoying the soup. He creates the list as follows:
root_veggies = ['cassava', 'earthnut', 'lily yam', 'rutabaga']
The list is named root_veggies and it stores the names of four root vegetables. Each name must be enclosed within quotes as it is text data and not a number. The following for loop prints out the name of each root vegetable in the list:
for i in root_veggies:
    print i
Although it is common to use the letters i, j,  and k as loop variables, any valid variable name can be used.
In addition to numbers and textual data, lists can also store objects. For example, let us create three different objects of the GlassElevator class and store them in a list called elevator_list:
elevator1 = GlassElevator()
elevator2 = GlassElevator()
elevator3 = GlassElevator()
elevator_list = [elevator1, elevator2, elevator3]
for item in elevator_list:
    print item
Copy this program into the editor and run it. You will observe that the output comprises of 3 lines of the form
GlassElevator.GlassElevator instance at 0x100deaa28
Each line is a brief description of an elevator object; the number at the end of the line identifies the object internally in the system and it can change each time the program is run. You don't need to concern yourself with this number.
To dispatch all three elevators to a certain floor, say 5, you can call the go_to_floor method of the Elevator class within the loop as follows:
for item in elevator_list:
    item.go_to_floor(5)
Now, back to the task at hand. Merscythe has to use the Codue to track the UFOS. The UfoTracker class provides the method get_ufo_list that returns a list containing objects of the Ufo class. Suppose that you want to display each object in the list. Before writing the code, we describe the steps that are needed to accomplish this:
Step 1. Create an object of the UfoTracker class called tracker.
Step 2. Use the get_ufo_list method in the UfoTracker class to get a list containing the names of all Ufo objects. Store this data in a variable called ufo_list.
Step 3: Display all the objects in ufo_list.
Note how we have broken down the problem into a sequence of simpler steps known as an algorithm. When you encounter a more complex problem, you can use an algorithm to help you solve it. After you have devised an algorithm, write the code for each step in the algorithm. In step 1, an object of the UfoTracker class called tracker is created:
tracker = UfoTracker()
In step 2, the names of all Ufo objects are stored in ufo_list as follows:
ufo_list = tracker.get_ufo_list()
Finally, in step 3, a for loop is used to iterate over the objects in ufo_list and each object is displayed: 
for ufo in ufo_list:
    print ufo
Putting the code statements together creates the program. In addition, remember to import the classes you are using. The complete program for the algorithm discussed earlier follows:
from UfoTracker import UfoTracker
tracker = UfoTracker() ufo_list = tracker.get_ufo_list() for ufo in ufo_list:
    print ufo
This will display each Ufo object in ufo_list. To get more information about each object, you can use the display method in the Ufo class. Change the statement
print ufo
to
ufo.display() 
Import the Ufo class. Run the program and observe the output. This concludes the tutorial. 
     </Data>
</Chapter>