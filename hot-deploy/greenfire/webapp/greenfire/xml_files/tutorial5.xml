<?xml version="1.0" encoding="utf-8" ?>
<Chapter>
     <Title>Python Tutorial 5: Methods that Return Data </Title>
     <Data>In the previous tutorial, you learned how to give arguments to methods. In this tutorial, you will learn about methods that return useful information back to the program. When Merscythe looks around the beautiful Argenglass tower, he wishes to get more information about the tower. He gets his Codue out and examines the methods in the Tower class. This class has the following methods:
get_area  
get_material
get_number_of_occupants
A description is included for each method in the class. The get_area method returns a number that is the size of the tower in square feet. The get_material method gives the material that the tower is made of, and method get_number_of_occupants returns the number of inhabitants in the tower currently. Merscythe writes a program to check the area first:
from Tower import Tower tower_room = Tower() area = tower_room.get_area() print area
Remember that tower_room is a type of Tower, so you must include the first two lines in this program. When the program is run, the get_area method returns the size of the tower back to the program and stores it in the variable called area. The print statement then displays this number on the screen. Test this program and then modify it to  use the get_material method. Something inexplicable happens when Merscythe uses the get_number_of_occupants method as shown below:
from Tower import Tower tower_room = Tower() num_occupants = tower_room.get_number_of_occupants() print num_occupants
The variable num_occupants stores the value returned by the class Tower's get_number_of_occupants method. When Merscythe runs this program, he is puzzled to see that the value printed on the screen is 4. However, there are only 3 people in the tower: Loog, Herv, and Merscythe himself. After the explosion, when Merscythe and Herv are looking for Loog, Merscythe runs the program again and notices that the value printed out is 2. Merscythe wonders if someone was hiding in the tower previously and may have played a role in kidnapping Loog.
In the previous tutorials, you have used methods that don't return a value. For example, the open and close methods of class Door perform actions but don't return any value. There are other types of methods that return only one of two values: True or False. Here, True and False are keywords in Python. Note that they are spelled as starting with an uppercase letter and all letters are in lowercase. To see why these methods are useful, we will look at two methods in the Elevator class: at_top and at_bottom. The at_top method returns the value True if the elevator is at the topmost floor; otherwise, it returns the value False. This is helpful in determining if the elevator has reached the top floor. Analogously, the at_bottom method is used to determine if the elevator is at the bottom floor. For example, the following code displays "At top floor" if the elevator has reached the top floor. 
from GlassElevator import GlassElevator glass_elevator = GlassElevator()  glass_elevator.go_to_floor(target_floor=10) if glass_elevator.at_top():    print 'at top floor' else:    print 'not at top floor'
The condition in the if statement is glass_elevator.at_top(). If the elevator is at the top floor, the value returned by the at_top method is True, and the action in the if clause will be executed. What happens when you run the program? What happens if you change the argument in the go_to_floor method to 100?
</Data>
</Chapter>