<?xml version="1.0" encoding="UTF-8" ?>

<Chapter>
     <Title><![CDATA[Python Tutorial 1<br /> Objects, Classes <br />and Methods ]]></Title>
     <Data>As Merscythe proceeds on his adventures, he is going to encounter doors, vaults, and many other objects. These objects can be programmed with behaviors using the Python programming language. What do we mean by behaviors? Around your room, there may be doors, windows, books, balls, and other objects. Each object has specific behaviors that indicate how it is used. For example, doors and windows can open and close, books can be read, and balls can roll and bounce. Merscythe has come across a simple door object that has two behaviors: open and close. The door is programmed to close via the following line of code:
treedoor.close()
Here, the object’s name is “treedoor" and its behavior is “close”. In Python, a dot is placed between the name of the object and the behavior. A behavior is also called a method. A method describes the operations that the object can perform, and the method name must be followed by a pair of parentheses. In his adventures, Merscythe will need to use his skill and ingenuity to program and control other types of objects. However, how can these objects be controlled? Hidden away in the new world that Merscythe is about to enter is a library with classes. A class contains information about how to control an object. For example, the class called Door has a method called “open()” that can be used to open doors, and another method called “close()” that can be used to close doors. Let us examine the program in more detail. The first line says “from Door import Door”. This line is telling us that the library has a class called Door that we want to use in this program. The next line of the program is:
treedoor = Door()
This line tells us that treedoor is a type of Door, where Door is the class with methods open and close. So we can program treedoor using the methods open and close in the Door class. Note that treedoor is a single word and there is no space between the words tree and door. In the Python programming language, it is also common to create new words using an underscore, so the word treedoor could also be written as tree_door. The case of the letters in each word is important. The name treedoor is written using lower case letters only - changing the case of any letter in this word will result in an error in the program and it will not run.  The class name Door starts with an uppercase letter, so you should follow this convention in the program. 
This brings us to the last line of the program, which will cause the treedoor to close when the program is run:
treedoor.close()
What should Merscythe change this statement to? After the program is changed, you will need to run the program to see the changes in action. The program will not run if it contains errors. For example, if you forget to add the dot between the words treedoor and close, mistype these words, or make other mistakes, the error messages will be read out when the program is run. You will need to correct the errors and rerun the program. After you have written or modified the program in the editor, run the program. The output of the program will be displayed on the screen and read aloud. If the output is correct, the next chapter will be unlocked so that Merscythe can continue on his adventures. This concludes the tutorial. 
</Data>
</Chapter>

